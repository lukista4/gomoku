import sys
import pygame

pygame.init()

WHITE = (255, 255, 255)
GREY = (180, 180, 180)
RED = (220, 0, 0)
GREEN = (0, 200, 0)
ORANGE = (255, 165, 0)
BLUE = (0, 0, 200)
BLACK = (0, 0, 0)

WIDTH = 600
HEIGHT = 600
LINE_WIDTH = 4
BOARD_ROWS = 15
BOARD_COLS = 15
SQUARE_SIZE = WIDTH // BOARD_COLS
CIRCLE_RADIUS = SQUARE_SIZE // 3
CIRCLE_WIDTH = 4

DEPTH = 3
BRANCH = 100
AGGRESSIVITY = 4

screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("GOMOKU")
screen.fill(ORANGE)

board = [0 for j in range(BOARD_COLS*BOARD_ROWS)]

bounds4 = [[0, 5, 0, 61, 0, 65, 0, 1], [0, 6, 1, 62, 1, 66, 1, 16], [0, 7, 2, 63, 2, 67, 2, 31], [0, 8, 3, 64, 3, 68, 3, 46], [0, 9, 4, 65, 4, 69, 4, 61], [1, 10, 5, 66, 5, 70, 5, 62], [2, 11, 6, 67, 6, 71, 6, 63], [3, 12, 7, 68, 7, 72, 7, 64], [4, 13, 8, 69, 8, 73, 8, 65], [5, 14, 9, 70, 9, 74, 9, 66], [6, 15, 10, 71, 10, 75, 10, 67], [7, 15, 11, 72, 11, 60, 11, 68], [8, 15, 12, 73, 12, 45, 12, 69], [9, 15, 13, 74, 13, 30, 13, 70], [10, 15, 14, 75, 14, 15, 14, 71], [15, 20, 0, 76, 15, 80, 1, 16], [15, 21, 1, 77, 0, 81, 2, 31], [15, 22, 2, 78, 1, 82, 3, 46], [15, 23, 3, 79, 2, 83, 4, 61], [15, 24, 4, 80, 3, 84, 5, 76], [16, 25, 5, 81, 4, 85, 6, 77], [17, 26, 6, 82, 5, 86, 7, 78], [18, 27, 7, 83, 6, 87, 8, 79], [19, 28, 8, 84, 7, 88, 9, 80], [20, 29, 9, 85, 8, 89, 10, 81], [21, 30, 10, 86, 9, 90, 11, 82], [22, 30, 11, 87, 10, 75, 12, 83], [23, 30, 12, 88, 11, 60, 13, 84], [24, 30, 13, 89, 12, 45, 14, 85], [25, 30, 14, 90, 13, 30, 29, 86], [30, 35, 0, 91, 30, 95, 2, 31], [30, 36, 1, 92, 15, 96, 3, 46], [30, 37, 2, 93, 0, 97, 4, 61], [30, 38, 3, 94, 1, 98, 5, 76], [30, 39, 4, 95, 2, 99, 6, 91], [31, 40, 5, 96, 3, 100, 7, 92], [32, 41, 6, 97, 4, 101, 8, 93], [33, 42, 7, 98, 5, 102, 9, 94], [34, 43, 8, 99, 6, 103, 10, 95], [35, 44, 9, 100, 7, 104, 11, 96], [36, 45, 10, 101, 8, 105, 12, 97], [37, 45, 11, 102, 9, 90, 13, 98], [38, 45, 12, 103, 10, 75, 14, 99], [39, 45, 13, 104, 11, 60, 29, 100], [40, 45, 14, 105, 12, 45, 44, 101], [45, 50, 0, 106, 45, 110, 3, 46], [45, 51, 1, 107, 30, 111, 4, 61], [45, 52, 2, 108, 15, 112, 5, 76], [45, 53, 3, 109, 0, 113, 6, 91], [45, 54, 4, 110, 1, 114, 7, 106], [46, 55, 5, 111, 2, 115, 8, 107], [47, 56, 6, 112, 3, 116, 9, 108], [48, 57, 7, 113, 4, 117, 10, 109], [49, 58, 8, 114, 5, 118, 11, 110], [50, 59, 9, 115, 6, 119, 12, 111], [51, 60, 10, 116, 7, 120, 13, 112], [52, 60, 11, 117, 8, 105, 14, 113], [53, 60, 12, 118, 9, 90, 29, 114], [54, 60, 13, 119, 10, 75, 44, 115], [55, 60, 14, 120, 11, 60, 59, 116], [60, 65, 0, 121, 60, 125, 4, 61], [60, 66, 1, 122, 45, 126, 5, 76], [60, 67, 2, 123, 30, 127, 6, 91], [60, 68, 3, 124, 15, 128, 7, 106], [60, 69, 4, 125, 0, 129, 8, 121], [61, 70, 5, 126, 1, 130, 9, 122], [62, 71, 6, 127, 2, 131, 10, 123], [63, 72, 7, 128, 3, 132, 11, 124], [64, 73, 8, 129, 4, 133, 12, 125], [65, 74, 9, 130, 5, 134, 13, 126], [66, 75, 10, 131, 6, 135, 14, 127], [67, 75, 11, 132, 7, 120, 29, 128], [68, 75, 12, 133, 8, 105, 44, 129], [69, 75, 13, 134, 9, 90, 59, 130], [70, 75, 14, 135, 10, 75, 74, 131], [75, 80, 15, 136, 75, 140, 19, 76], [75, 81, 16, 137, 60, 141, 20, 91], [75, 82, 17, 138, 45, 142, 21, 106], [75, 83, 18, 139, 30, 143, 22, 121], [75, 84, 19, 140, 15, 144, 23, 136], [76, 85, 20, 141, 16, 145, 24, 137], [77, 86, 21, 142, 17, 146, 25, 138], [78, 87, 22, 143, 18, 147, 26, 139], [79, 88, 23, 144, 19, 148, 27, 140], [80, 89, 24, 145, 20, 149, 28, 141], [81, 90, 25, 146, 21, 150, 29, 142], [82, 90, 26, 147, 22, 135, 44, 143], [83, 90, 27, 148, 23, 120, 59, 144], [84, 90, 28, 149, 24, 105, 74, 145], [85, 90, 29, 150, 25, 90, 89, 146], [90, 95, 30, 151, 90, 155, 34, 91], [90, 96, 31, 152, 75, 156, 35, 106], [90, 97, 32, 153, 60, 157, 36, 121], [90, 98, 33, 154, 45, 158, 37, 136], [90, 99, 34, 155, 30, 159, 38, 151], [91, 100, 35, 156, 31, 160, 39, 152], [92, 101, 36, 157, 32, 161, 40, 153], [93, 102, 37, 158, 33, 162, 41, 154], [94, 103, 38, 159, 34, 163, 42, 155], [95, 104, 39, 160, 35, 164, 43, 156], [96, 105, 40, 161, 36, 165, 44, 157], [97, 105, 41, 162, 37, 150, 59, 158], [98, 105, 42, 163, 38, 135, 74, 159], [99, 105, 43, 164, 39, 120, 89, 160], [100, 105, 44, 165, 40, 105, 104, 161], [105, 110, 45, 166, 105, 170, 49, 106], [105, 111, 46, 167, 90, 171, 50, 121], [105, 112, 47, 168, 75, 172, 51, 136], [105, 113, 48, 169, 60, 173, 52, 151], [105, 114, 49, 170, 45, 174, 53, 166], [106, 115, 50, 171, 46, 175, 54, 167], [107, 116, 51, 172, 47, 176, 55, 168], [108, 117, 52, 173, 48, 177, 56, 169], [109, 118, 53, 174, 49, 178, 57, 170], [110, 119, 54, 175, 50, 179, 58, 171], [111, 120, 55, 176, 51, 180, 59, 172], [112, 120, 56, 177, 52, 165, 74, 173], [113, 120, 57, 178, 53, 150, 89, 174], [114, 120, 58, 179, 54, 135, 104, 175], [115, 120, 59, 180, 55, 120, 119, 176], [120, 125, 60, 181, 120, 185, 64, 121], [120, 126, 61, 182, 105, 186, 65, 136], [120, 127, 62, 183, 90, 187, 66, 151], [120, 128, 63, 184, 75, 188, 67, 166], [120, 129, 64, 185, 60, 189, 68, 181], [121, 130, 65, 186, 61, 190, 69, 182], [122, 131, 66, 187, 62, 191, 70, 183], [123, 132, 67, 188, 63, 192, 71, 184], [124, 133, 68, 189, 64, 193, 72, 185], [125, 134, 69, 190, 65, 194, 73, 186], [126, 135, 70, 191, 66, 195, 74, 187], [127, 135, 71, 192, 67, 180, 89, 188], [128, 135, 72, 193, 68, 165, 104, 189], [129, 135, 73, 194, 69, 150, 119, 190], [130, 135, 74, 195, 70, 135, 134, 191], [135, 140, 75, 196, 135, 200, 79, 136], [135, 141, 76, 197, 120, 201, 80, 151], [135, 142, 77, 198, 105, 202, 81, 166], [135, 143, 78, 199, 90, 203, 82, 181], [135, 144, 79, 200, 75, 204, 83, 196], [136, 145, 80, 201, 76, 205, 84, 197], [137, 146, 81, 202, 77, 206, 85, 198], [138, 147, 82, 203, 78, 207, 86, 199], [139, 148, 83, 204, 79, 208, 87, 200], [140, 149, 84, 205, 80, 209, 88, 201], [141, 150, 85, 206, 81, 210, 89, 202], [142, 150, 86, 207, 82, 195, 104, 203], [143, 150, 87, 208, 83, 180, 119, 204], [144, 150, 88, 209, 84, 165, 134, 205], [145, 150, 89, 210, 85, 150, 149, 206], [150, 155, 90, 211, 150, 215, 94, 151], [150, 156, 91, 212, 135, 216, 95, 166], [150, 157, 92, 213, 120, 217, 96, 181], [150, 158, 93, 214, 105, 218, 97, 196], [150, 159, 94, 215, 90, 219, 98, 211], [151, 160, 95, 216, 91, 220, 99, 212], [152, 161, 96, 217, 92, 221, 100, 213], [153, 162, 97, 218, 93, 222, 101, 214], [154, 163, 98, 219, 94, 223, 102, 215], [155, 164, 99, 220, 95, 224, 103, 216], [156, 165, 100, 221, 96, 225, 104, 217], [157, 165, 101, 222, 97, 210, 119, 218], [158, 165, 102, 223, 98, 195, 134, 219], [159, 165, 103, 224, 99, 180, 149, 220], [160, 165, 104, 225, 100, 165, 164, 221], [165, 170, 105, 211, 165, 214, 109, 166], [165, 171, 106, 212, 150, 215, 110, 181], [165, 172, 107, 213, 135, 216, 111, 196], [165, 173, 108, 214, 120, 217, 112, 211], [165, 174, 109, 215, 105, 218, 113, 212], [166, 175, 110, 216, 106, 219, 114, 213], [167, 176, 111, 217, 107, 220, 115, 214], [168, 177, 112, 218, 108, 221, 116, 215], [169, 178, 113, 219, 109, 222, 117, 216], [170, 179, 114, 220, 110, 223, 118, 217], [171, 180, 115, 221, 111, 224, 119, 218], [172, 180, 116, 222, 112, 225, 134, 219], [173, 180, 117, 223, 113, 210, 149, 220], [174, 180, 118, 224, 114, 195, 164, 221], [175, 180, 119, 225, 115, 180, 179, 222], [180, 185, 120, 211, 180, 213, 124, 181], [180, 186, 121, 212, 165, 214, 125, 196], [180, 187, 122, 213, 150, 215, 126, 211], [180, 188, 123, 214, 135, 216, 127, 212], [180, 189, 124, 215, 120, 217, 128, 213], [181, 190, 125, 216, 121, 218, 129, 214], [182, 191, 126, 217, 122, 219, 130, 215], [183, 192, 127, 218, 123, 220, 131, 216], [184, 193, 128, 219, 124, 221, 132, 217], [185, 194, 129, 220, 125, 222, 133, 218], [186, 195, 130, 221, 126, 223, 134, 219], [187, 195, 131, 222, 127, 224, 149, 220], [188, 195, 132, 223, 128, 225, 164, 221], [189, 195, 133, 224, 129, 210, 179, 222], [190, 195, 134, 225, 130, 195, 194, 223], [195, 200, 135, 211, 195, 212, 139, 196], [195, 201, 136, 212, 180, 213, 140, 211], [195, 202, 137, 213, 165, 214, 141, 212], [195, 203, 138, 214, 150, 215, 142, 213], [195, 204, 139, 215, 135, 216, 143, 214], [196, 205, 140, 216, 136, 217, 144, 215], [197, 206, 141, 217, 137, 218, 145, 216], [198, 207, 142, 218, 138, 219, 146, 217], [199, 208, 143, 219, 139, 220, 147, 218], [200, 209, 144, 220, 140, 221, 148, 219], [201, 210, 145, 221, 141, 222, 149, 220], [202, 210, 146, 222, 142, 223, 164, 221], [203, 210, 147, 223, 143, 224, 179, 222], [204, 210, 148, 224, 144, 225, 194, 223], [205, 210, 149, 225, 145, 210, 209, 224], [210, 215, 150, 211, 210, 211, 154, 211], [210, 216, 151, 212, 195, 212, 155, 212], [210, 217, 152, 213, 180, 213, 156, 213], [210, 218, 153, 214, 165, 214, 157, 214], [210, 219, 154, 215, 150, 215, 158, 215], [211, 220, 155, 216, 151, 216, 159, 216], [212, 221, 156, 217, 152, 217, 160, 217], [213, 222, 157, 218, 153, 218, 161, 218], [214, 223, 158, 219, 154, 219, 162, 219], [215, 224, 159, 220, 155, 220, 163, 220], [216, 225, 160, 221, 156, 221, 164, 221], [217, 225, 161, 222, 157, 222, 179, 222], [218, 225, 162, 223, 158, 223, 194, 223], [219, 225, 163, 224, 159, 224, 209, 224], [220, 225, 164, 225, 160, 225, 224, 225]]
bounds7 = [[0, 8, 0, 106, 0, 113, 0, 1], [0, 9, 1, 107, 1, 114, 1, 16], [0, 10, 2, 108, 2, 115, 2, 31], [0, 11, 3, 109, 3, 116, 3, 46], [0, 12, 4, 110, 4, 117, 4, 61], [0, 13, 5, 111, 5, 118, 5, 76], [0, 14, 6, 112, 6, 119, 6, 91], [0, 15, 7, 113, 7, 120, 7, 106], [1, 15, 8, 114, 8, 105, 8, 107], [2, 15, 9, 115, 9, 90, 9, 108], [3, 15, 10, 116, 10, 75, 10, 109], [4, 15, 11, 117, 11, 60, 11, 110], [5, 15, 12, 118, 12, 45, 12, 111], [6, 15, 13, 119, 13, 30, 13, 112], [7, 15, 14, 120, 14, 15, 14, 113], [15, 23, 0, 121, 15, 128, 1, 16], [15, 24, 1, 122, 0, 129, 2, 31], [15, 25, 2, 123, 1, 130, 3, 46], [15, 26, 3, 124, 2, 131, 4, 61], [15, 27, 4, 125, 3, 132, 5, 76], [15, 28, 5, 126, 4, 133, 6, 91], [15, 29, 6, 127, 5, 134, 7, 106], [15, 30, 7, 128, 6, 135, 8, 121], [16, 30, 8, 129, 7, 120, 9, 122], [17, 30, 9, 130, 8, 105, 10, 123], [18, 30, 10, 131, 9, 90, 11, 124], [19, 30, 11, 132, 10, 75, 12, 125], [20, 30, 12, 133, 11, 60, 13, 126], [21, 30, 13, 134, 12, 45, 14, 127], [22, 30, 14, 135, 13, 30, 29, 128], [30, 38, 0, 136, 30, 143, 2, 31], [30, 39, 1, 137, 15, 144, 3, 46], [30, 40, 2, 138, 0, 145, 4, 61], [30, 41, 3, 139, 1, 146, 5, 76], [30, 42, 4, 140, 2, 147, 6, 91], [30, 43, 5, 141, 3, 148, 7, 106], [30, 44, 6, 142, 4, 149, 8, 121], [30, 45, 7, 143, 5, 150, 9, 136], [31, 45, 8, 144, 6, 135, 10, 137], [32, 45, 9, 145, 7, 120, 11, 138], [33, 45, 10, 146, 8, 105, 12, 139], [34, 45, 11, 147, 9, 90, 13, 140], [35, 45, 12, 148, 10, 75, 14, 141], [36, 45, 13, 149, 11, 60, 29, 142], [37, 45, 14, 150, 12, 45, 44, 143], [45, 53, 0, 151, 45, 158, 3, 46], [45, 54, 1, 152, 30, 159, 4, 61], [45, 55, 2, 153, 15, 160, 5, 76], [45, 56, 3, 154, 0, 161, 6, 91], [45, 57, 4, 155, 1, 162, 7, 106], [45, 58, 5, 156, 2, 163, 8, 121], [45, 59, 6, 157, 3, 164, 9, 136], [45, 60, 7, 158, 4, 165, 10, 151], [46, 60, 8, 159, 5, 150, 11, 152], [47, 60, 9, 160, 6, 135, 12, 153], [48, 60, 10, 161, 7, 120, 13, 154], [49, 60, 11, 162, 8, 105, 14, 155], [50, 60, 12, 163, 9, 90, 29, 156], [51, 60, 13, 164, 10, 75, 44, 157], [52, 60, 14, 165, 11, 60, 59, 158], [60, 68, 0, 166, 60, 173, 4, 61], [60, 69, 1, 167, 45, 174, 5, 76], [60, 70, 2, 168, 30, 175, 6, 91], [60, 71, 3, 169, 15, 176, 7, 106], [60, 72, 4, 170, 0, 177, 8, 121], [60, 73, 5, 171, 1, 178, 9, 136], [60, 74, 6, 172, 2, 179, 10, 151], [60, 75, 7, 173, 3, 180, 11, 166], [61, 75, 8, 174, 4, 165, 12, 167], [62, 75, 9, 175, 5, 150, 13, 168], [63, 75, 10, 176, 6, 135, 14, 169], [64, 75, 11, 177, 7, 120, 29, 170], [65, 75, 12, 178, 8, 105, 44, 171], [66, 75, 13, 179, 9, 90, 59, 172], [67, 75, 14, 180, 10, 75, 74, 173], [75, 83, 0, 181, 75, 188, 5, 76], [75, 84, 1, 182, 60, 189, 6, 91], [75, 85, 2, 183, 45, 190, 7, 106], [75, 86, 3, 184, 30, 191, 8, 121], [75, 87, 4, 185, 15, 192, 9, 136], [75, 88, 5, 186, 0, 193, 10, 151], [75, 89, 6, 187, 1, 194, 11, 166], [75, 90, 7, 188, 2, 195, 12, 181], [76, 90, 8, 189, 3, 180, 13, 182], [77, 90, 9, 190, 4, 165, 14, 183], [78, 90, 10, 191, 5, 150, 29, 184], [79, 90, 11, 192, 6, 135, 44, 185], [80, 90, 12, 193, 7, 120, 59, 186], [81, 90, 13, 194, 8, 105, 74, 187], [82, 90, 14, 195, 9, 90, 89, 188], [90, 98, 0, 196, 90, 203, 6, 91], [90, 99, 1, 197, 75, 204, 7, 106], [90, 100, 2, 198, 60, 205, 8, 121], [90, 101, 3, 199, 45, 206, 9, 136], [90, 102, 4, 200, 30, 207, 10, 151], [90, 103, 5, 201, 15, 208, 11, 166], [90, 104, 6, 202, 0, 209, 12, 181], [90, 105, 7, 203, 1, 210, 13, 196], [91, 105, 8, 204, 2, 195, 14, 197], [92, 105, 9, 205, 3, 180, 29, 198], [93, 105, 10, 206, 4, 165, 44, 199], [94, 105, 11, 207, 5, 150, 59, 200], [95, 105, 12, 208, 6, 135, 74, 201], [96, 105, 13, 209, 7, 120, 89, 202], [97, 105, 14, 210, 8, 105, 104, 203], [105, 113, 0, 211, 105, 218, 7, 106], [105, 114, 1, 212, 90, 219, 8, 121], [105, 115, 2, 213, 75, 220, 9, 136], [105, 116, 3, 214, 60, 221, 10, 151], [105, 117, 4, 215, 45, 222, 11, 166], [105, 118, 5, 216, 30, 223, 12, 181], [105, 119, 6, 217, 15, 224, 13, 196], [105, 120, 7, 218, 0, 225, 14, 211], [106, 120, 8, 219, 1, 210, 29, 212], [107, 120, 9, 220, 2, 195, 44, 213], [108, 120, 10, 221, 3, 180, 59, 214], [109, 120, 11, 222, 4, 165, 74, 215], [110, 120, 12, 223, 5, 150, 89, 216], [111, 120, 13, 224, 6, 135, 104, 217], [112, 120, 14, 225, 7, 120, 119, 218], [120, 128, 15, 211, 120, 217, 22, 121], [120, 129, 16, 212, 105, 218, 23, 136], [120, 130, 17, 213, 90, 219, 24, 151], [120, 131, 18, 214, 75, 220, 25, 166], [120, 132, 19, 215, 60, 221, 26, 181], [120, 133, 20, 216, 45, 222, 27, 196], [120, 134, 21, 217, 30, 223, 28, 211], [120, 135, 22, 218, 15, 224, 29, 212], [121, 135, 23, 219, 16, 225, 44, 213], [122, 135, 24, 220, 17, 210, 59, 214], [123, 135, 25, 221, 18, 195, 74, 215], [124, 135, 26, 222, 19, 180, 89, 216], [125, 135, 27, 223, 20, 165, 104, 217], [126, 135, 28, 224, 21, 150, 119, 218], [127, 135, 29, 225, 22, 135, 134, 219], [135, 143, 30, 211, 135, 216, 37, 136], [135, 144, 31, 212, 120, 217, 38, 151], [135, 145, 32, 213, 105, 218, 39, 166], [135, 146, 33, 214, 90, 219, 40, 181], [135, 147, 34, 215, 75, 220, 41, 196], [135, 148, 35, 216, 60, 221, 42, 211], [135, 149, 36, 217, 45, 222, 43, 212], [135, 150, 37, 218, 30, 223, 44, 213], [136, 150, 38, 219, 31, 224, 59, 214], [137, 150, 39, 220, 32, 225, 74, 215], [138, 150, 40, 221, 33, 210, 89, 216], [139, 150, 41, 222, 34, 195, 104, 217], [140, 150, 42, 223, 35, 180, 119, 218], [141, 150, 43, 224, 36, 165, 134, 219], [142, 150, 44, 225, 37, 150, 149, 220], [150, 158, 45, 211, 150, 215, 52, 151], [150, 159, 46, 212, 135, 216, 53, 166], [150, 160, 47, 213, 120, 217, 54, 181], [150, 161, 48, 214, 105, 218, 55, 196], [150, 162, 49, 215, 90, 219, 56, 211], [150, 163, 50, 216, 75, 220, 57, 212], [150, 164, 51, 217, 60, 221, 58, 213], [150, 165, 52, 218, 45, 222, 59, 214], [151, 165, 53, 219, 46, 223, 74, 215], [152, 165, 54, 220, 47, 224, 89, 216], [153, 165, 55, 221, 48, 225, 104, 217], [154, 165, 56, 222, 49, 210, 119, 218], [155, 165, 57, 223, 50, 195, 134, 219], [156, 165, 58, 224, 51, 180, 149, 220], [157, 165, 59, 225, 52, 165, 164, 221], [165, 173, 60, 211, 165, 214, 67, 166], [165, 174, 61, 212, 150, 215, 68, 181], [165, 175, 62, 213, 135, 216, 69, 196], [165, 176, 63, 214, 120, 217, 70, 211], [165, 177, 64, 215, 105, 218, 71, 212], [165, 178, 65, 216, 90, 219, 72, 213], [165, 179, 66, 217, 75, 220, 73, 214], [165, 180, 67, 218, 60, 221, 74, 215], [166, 180, 68, 219, 61, 222, 89, 216], [167, 180, 69, 220, 62, 223, 104, 217], [168, 180, 70, 221, 63, 224, 119, 218], [169, 180, 71, 222, 64, 225, 134, 219], [170, 180, 72, 223, 65, 210, 149, 220], [171, 180, 73, 224, 66, 195, 164, 221], [172, 180, 74, 225, 67, 180, 179, 222], [180, 188, 75, 211, 180, 213, 82, 181], [180, 189, 76, 212, 165, 214, 83, 196], [180, 190, 77, 213, 150, 215, 84, 211], [180, 191, 78, 214, 135, 216, 85, 212], [180, 192, 79, 215, 120, 217, 86, 213], [180, 193, 80, 216, 105, 218, 87, 214], [180, 194, 81, 217, 90, 219, 88, 215], [180, 195, 82, 218, 75, 220, 89, 216], [181, 195, 83, 219, 76, 221, 104, 217], [182, 195, 84, 220, 77, 222, 119, 218], [183, 195, 85, 221, 78, 223, 134, 219], [184, 195, 86, 222, 79, 224, 149, 220], [185, 195, 87, 223, 80, 225, 164, 221], [186, 195, 88, 224, 81, 210, 179, 222], [187, 195, 89, 225, 82, 195, 194, 223], [195, 203, 90, 211, 195, 212, 97, 196], [195, 204, 91, 212, 180, 213, 98, 211], [195, 205, 92, 213, 165, 214, 99, 212], [195, 206, 93, 214, 150, 215, 100, 213], [195, 207, 94, 215, 135, 216, 101, 214], [195, 208, 95, 216, 120, 217, 102, 215], [195, 209, 96, 217, 105, 218, 103, 216], [195, 210, 97, 218, 90, 219, 104, 217], [196, 210, 98, 219, 91, 220, 119, 218], [197, 210, 99, 220, 92, 221, 134, 219], [198, 210, 100, 221, 93, 222, 149, 220], [199, 210, 101, 222, 94, 223, 164, 221], [200, 210, 102, 223, 95, 224, 179, 222], [201, 210, 103, 224, 96, 225, 194, 223], [202, 210, 104, 225, 97, 210, 209, 224], [210, 218, 105, 211, 210, 211, 112, 211], [210, 219, 106, 212, 195, 212, 113, 212], [210, 220, 107, 213, 180, 213, 114, 213], [210, 221, 108, 214, 165, 214, 115, 214], [210, 222, 109, 215, 150, 215, 116, 215], [210, 223, 110, 216, 135, 216, 117, 216], [210, 224, 111, 217, 120, 217, 118, 217], [210, 225, 112, 218, 105, 218, 119, 218], [211, 225, 113, 219, 106, 219, 134, 219], [212, 225, 114, 220, 107, 220, 149, 220], [213, 225, 115, 221, 108, 221, 164, 221], [214, 225, 116, 222, 109, 222, 179, 222], [215, 225, 117, 223, 110, 223, 194, 223], [216, 225, 118, 224, 111, 224, 209, 224], [217, 225, 119, 225, 112, 225, 224, 225]]
L_shapes = [[13, 17, 29, 31], [14, 18, 30, 32], [15, 19, 31, 33], [16, 20, 32, 34], [17, 21, 33, 35], [18, 22, 34, 36], [19, 23, 35, 37], [20, 24, 36, 38], [21, 25, 37, 39], [22, 26, 38, 40], [23, 27, 39, 41], [24, 28, 40, 42], [25, 29, 41, 43], [26, 30, 42, 44, 0], [27, 31, 43, 45, 1], [28, 32, 44, 46, 2], [29, 33, 45, 47, 3], [30, 34, 46, 48, 4, 0], [31, 35, 47, 49, 5, 1], [32, 36, 48, 50, 6, 2], [33, 37, 49, 51, 7, 3], [34, 38, 50, 52, 8, 4], [35, 39, 51, 53, 9, 5], [36, 40, 52, 54, 10, 6], [37, 41, 53, 55, 11, 7], [38, 42, 54, 56, 12, 8], [39, 43, 55, 57, 13, 9], [40, 44, 56, 58, 14, 10], [41, 45, 57, 59, 15, 11], [42, 46, 58, 60, 16, 12, 0], [43, 47, 59, 61, 17, 13, 1], [44, 48, 60, 62, 18, 14, 2, 0], [45, 49, 61, 63, 19, 15, 3, 1], [46, 50, 62, 64, 20, 16, 4, 2], [47, 51, 63, 65, 21, 17, 5, 3], [48, 52, 64, 66, 22, 18, 6, 4], [49, 53, 65, 67, 23, 19, 7, 5], [50, 54, 66, 68, 24, 20, 8, 6], [51, 55, 67, 69, 25, 21, 9, 7], [52, 56, 68, 70, 26, 22, 10, 8], [53, 57, 69, 71, 27, 23, 11, 9], [54, 58, 70, 72, 28, 24, 12, 10], [55, 59, 71, 73, 29, 25, 13, 11], [56, 60, 72, 74, 30, 26, 14, 12], [57, 61, 73, 75, 31, 27, 15, 13], [58, 62, 74, 76, 32, 28, 16, 14], [59, 63, 75, 77, 33, 29, 17, 15], [60, 64, 76, 78, 34, 30, 18, 16], [61, 65, 77, 79, 35, 31, 19, 17], [62, 66, 78, 80, 36, 32, 20, 18], [63, 67, 79, 81, 37, 33, 21, 19], [64, 68, 80, 82, 38, 34, 22, 20], [65, 69, 81, 83, 39, 35, 23, 21], [66, 70, 82, 84, 40, 36, 24, 22], [67, 71, 83, 85, 41, 37, 25, 23], [68, 72, 84, 86, 42, 38, 26, 24], [69, 73, 85, 87, 43, 39, 27, 25], [70, 74, 86, 88, 44, 40, 28, 26], [71, 75, 87, 89, 45, 41, 29, 27], [72, 76, 88, 90, 46, 42, 30, 28], [73, 77, 89, 91, 47, 43, 31, 29], [74, 78, 90, 92, 48, 44, 32, 30], [75, 79, 91, 93, 49, 45, 33, 31], [76, 80, 92, 94, 50, 46, 34, 32], [77, 81, 93, 95, 51, 47, 35, 33], [78, 82, 94, 96, 52, 48, 36, 34], [79, 83, 95, 97, 53, 49, 37, 35], [80, 84, 96, 98, 54, 50, 38, 36], [81, 85, 97, 99, 55, 51, 39, 37], [82, 86, 98, 100, 56, 52, 40, 38], [83, 87, 99, 101, 57, 53, 41, 39], [84, 88, 100, 102, 58, 54, 42, 40], [85, 89, 101, 103, 59, 55, 43, 41], [86, 90, 102, 104, 60, 56, 44, 42], [87, 91, 103, 105, 61, 57, 45, 43], [88, 92, 104, 106, 62, 58, 46, 44], [89, 93, 105, 107, 63, 59, 47, 45], [90, 94, 106, 108, 64, 60, 48, 46], [91, 95, 107, 109, 65, 61, 49, 47], [92, 96, 108, 110, 66, 62, 50, 48], [93, 97, 109, 111, 67, 63, 51, 49], [94, 98, 110, 112, 68, 64, 52, 50], [95, 99, 111, 113, 69, 65, 53, 51], [96, 100, 112, 114, 70, 66, 54, 52], [97, 101, 113, 115, 71, 67, 55, 53], [98, 102, 114, 116, 72, 68, 56, 54], [99, 103, 115, 117, 73, 69, 57, 55], [100, 104, 116, 118, 74, 70, 58, 56], [101, 105, 117, 119, 75, 71, 59, 57], [102, 106, 118, 120, 76, 72, 60, 58], [103, 107, 119, 121, 77, 73, 61, 59], [104, 108, 120, 122, 78, 74, 62, 60], [105, 109, 121, 123, 79, 75, 63, 61], [106, 110, 122, 124, 80, 76, 64, 62], [107, 111, 123, 125, 81, 77, 65, 63], [108, 112, 124, 126, 82, 78, 66, 64], [109, 113, 125, 127, 83, 79, 67, 65], [110, 114, 126, 128, 84, 80, 68, 66], [111, 115, 127, 129, 85, 81, 69, 67], [112, 116, 128, 130, 86, 82, 70, 68], [113, 117, 129, 131, 87, 83, 71, 69], [114, 118, 130, 132, 88, 84, 72, 70], [115, 119, 131, 133, 89, 85, 73, 71], [116, 120, 132, 134, 90, 86, 74, 72], [117, 121, 133, 135, 91, 87, 75, 73], [118, 122, 134, 136, 92, 88, 76, 74], [119, 123, 135, 137, 93, 89, 77, 75], [120, 124, 136, 138, 94, 90, 78, 76], [121, 125, 137, 139, 95, 91, 79, 77], [122, 126, 138, 140, 96, 92, 80, 78], [123, 127, 139, 141, 97, 93, 81, 79], [124, 128, 140, 142, 98, 94, 82, 80], [125, 129, 141, 143, 99, 95, 83, 81], [126, 130, 142, 144, 100, 96, 84, 82], [127, 131, 143, 145, 101, 97, 85, 83], [128, 132, 144, 146, 102, 98, 86, 84], [129, 133, 145, 147, 103, 99, 87, 85], [130, 134, 146, 148, 104, 100, 88, 86], [131, 135, 147, 149, 105, 101, 89, 87], [132, 136, 148, 150, 106, 102, 90, 88], [133, 137, 149, 151, 107, 103, 91, 89], [134, 138, 150, 152, 108, 104, 92, 90], [135, 139, 151, 153, 109, 105, 93, 91], [136, 140, 152, 154, 110, 106, 94, 92], [137, 141, 153, 155, 111, 107, 95, 93], [138, 142, 154, 156, 112, 108, 96, 94], [139, 143, 155, 157, 113, 109, 97, 95], [140, 144, 156, 158, 114, 110, 98, 96], [141, 145, 157, 159, 115, 111, 99, 97], [142, 146, 158, 160, 116, 112, 100, 98], [143, 147, 159, 161, 117, 113, 101, 99], [144, 148, 160, 162, 118, 114, 102, 100], [145, 149, 161, 163, 119, 115, 103, 101], [146, 150, 162, 164, 120, 116, 104, 102], [147, 151, 163, 165, 121, 117, 105, 103], [148, 152, 164, 166, 122, 118, 106, 104], [149, 153, 165, 167, 123, 119, 107, 105], [150, 154, 166, 168, 124, 120, 108, 106], [151, 155, 167, 169, 125, 121, 109, 107], [152, 156, 168, 170, 126, 122, 110, 108], [153, 157, 169, 171, 127, 123, 111, 109], [154, 158, 170, 172, 128, 124, 112, 110], [155, 159, 171, 173, 129, 125, 113, 111], [156, 160, 172, 174, 130, 126, 114, 112], [157, 161, 173, 175, 131, 127, 115, 113], [158, 162, 174, 176, 132, 128, 116, 114], [159, 163, 175, 177, 133, 129, 117, 115], [160, 164, 176, 178, 134, 130, 118, 116], [161, 165, 177, 179, 135, 131, 119, 117], [162, 166, 178, 180, 136, 132, 120, 118], [163, 167, 179, 181, 137, 133, 121, 119], [164, 168, 180, 182, 138, 134, 122, 120], [165, 169, 181, 183, 139, 135, 123, 121], [166, 170, 182, 184, 140, 136, 124, 122], [167, 171, 183, 185, 141, 137, 125, 123], [168, 172, 184, 186, 142, 138, 126, 124], [169, 173, 185, 187, 143, 139, 127, 125], [170, 174, 186, 188, 144, 140, 128, 126], [171, 175, 187, 189, 145, 141, 129, 127], [172, 176, 188, 190, 146, 142, 130, 128], [173, 177, 189, 191, 147, 143, 131, 129], [174, 178, 190, 192, 148, 144, 132, 130], [175, 179, 191, 193, 149, 145, 133, 131], [176, 180, 192, 194, 150, 146, 134, 132], [177, 181, 193, 195, 151, 147, 135, 133], [178, 182, 194, 196, 152, 148, 136, 134], [179, 183, 195, 197, 153, 149, 137, 135], [180, 184, 196, 198, 154, 150, 138, 136], [181, 185, 197, 199, 155, 151, 139, 137], [182, 186, 198, 200, 156, 152, 140, 138], [183, 187, 199, 201, 157, 153, 141, 139], [184, 188, 200, 202, 158, 154, 142, 140], [185, 189, 201, 203, 159, 155, 143, 141], [186, 190, 202, 204, 160, 156, 144, 142], [187, 191, 203, 205, 161, 157, 145, 143], [188, 192, 204, 206, 162, 158, 146, 144], [189, 193, 205, 207, 163, 159, 147, 145], [190, 194, 206, 208, 164, 160, 148, 146], [191, 195, 207, 209, 165, 161, 149, 147], [192, 196, 208, 210, 166, 162, 150, 148], [193, 197, 209, 211, 167, 163, 151, 149], [194, 198, 210, 212, 168, 164, 152, 150], [195, 199, 211, 213, 169, 165, 153, 151], [196, 200, 212, 214, 170, 166, 154, 152], [197, 201, 213, 215, 171, 167, 155, 153], [198, 202, 214, 216, 172, 168, 156, 154], [199, 203, 215, 217, 173, 169, 157, 155], [200, 204, 216, 218, 174, 170, 158, 156], [201, 205, 217, 219, 175, 171, 159, 157], [202, 206, 218, 220, 176, 172, 160, 158], [203, 207, 219, 221, 177, 173, 161, 159], [204, 208, 220, 222, 178, 174, 162, 160], [205, 209, 221, 223, 179, 175, 163, 161], [206, 210, 222, 224, 180, 176, 164, 162], [207, 211, 223, 181, 177, 165, 163], [208, 212, 224, 182, 178, 166, 164], [209, 213, 183, 179, 167, 165], [210, 214, 184, 180, 168, 166], [211, 215, 185, 181, 169, 167], [212, 216, 186, 182, 170, 168], [213, 217, 187, 183, 171, 169], [214, 218, 188, 184, 172, 170], [215, 219, 189, 185, 173, 171], [216, 220, 190, 186, 174, 172], [217, 221, 191, 187, 175, 173], [218, 222, 192, 188, 176, 174], [219, 223, 193, 189, 177, 175], [220, 224, 194, 190, 178, 176], [221, 195, 191, 179, 177], [222, 196, 192, 180, 178], [223, 197, 193, 181, 179], [224, 198, 194, 182, 180], [199, 195, 183, 181], [200, 196, 184, 182], [201, 197, 185, 183], [202, 198, 186, 184], [203, 199, 187, 185], [204, 200, 188, 186], [205, 201, 189, 187], [206, 202, 190, 188], [207, 203, 191, 189], [208, 204, 192, 190], [209, 205, 193, 191], [210, 206, 194, 192], [211, 207, 195, 193]]

def draw_lines(color=BLACK):
    for i in range(1, BOARD_ROWS):
        pygame.draw.line(screen, color, (0, SQUARE_SIZE * i), (WIDTH, SQUARE_SIZE * i), LINE_WIDTH)
        pygame.draw.line(screen, color, (SQUARE_SIZE * i, 0), (SQUARE_SIZE * i, HEIGHT), LINE_WIDTH)


def draw_figures():
    global history
    for row in range(BOARD_ROWS):
        for col in range(BOARD_COLS):
            if board[row*BOARD_ROWS + col] == 1:
                pygame.draw.circle(screen, WHITE, (
                int(col * SQUARE_SIZE + SQUARE_SIZE // 2), int(row * SQUARE_SIZE + SQUARE_SIZE // 2)), CIRCLE_RADIUS)
                pygame.draw.circle(screen, BLACK, (
                int(col * SQUARE_SIZE + SQUARE_SIZE // 2), int(row * SQUARE_SIZE + SQUARE_SIZE // 2)), CIRCLE_RADIUS,
                                   CIRCLE_WIDTH)
                if history:
                    if history[-1] == row*BOARD_ROWS + col:
                        pygame.draw.circle(screen, RED, (
                            int(col * SQUARE_SIZE + SQUARE_SIZE // 2), int(row * SQUARE_SIZE + SQUARE_SIZE // 2)),
                                           CIRCLE_RADIUS,CIRCLE_WIDTH)
                    if len(history) >1:
                        if history[-2] == row * BOARD_ROWS + col:
                            pygame.draw.circle(screen, RED, (
                                int(col * SQUARE_SIZE + SQUARE_SIZE // 2), int(row * SQUARE_SIZE + SQUARE_SIZE // 2)),
                                               CIRCLE_RADIUS, CIRCLE_WIDTH)

            elif board[row*BOARD_ROWS + col] == 2:
                pygame.draw.circle(screen, BLACK, (
                int(col * SQUARE_SIZE + SQUARE_SIZE // 2), int(row * SQUARE_SIZE + SQUARE_SIZE // 2)), CIRCLE_RADIUS)
                if history:
                    if history[-1] == row*BOARD_ROWS + col:
                        pygame.draw.circle(screen, GREEN, (
                            int(col * SQUARE_SIZE + SQUARE_SIZE // 2), int(row * SQUARE_SIZE + SQUARE_SIZE // 2)),
                                           CIRCLE_RADIUS,CIRCLE_WIDTH)
                    if len(history) >1:
                        if history[-2] == row * BOARD_ROWS + col:
                            pygame.draw.circle(screen, GREEN, (
                                int(col * SQUARE_SIZE + SQUARE_SIZE // 2), int(row * SQUARE_SIZE + SQUARE_SIZE // 2)),
                                               CIRCLE_RADIUS, CIRCLE_WIDTH)
            #kvuli mazani
            else:
                pygame.draw.circle(screen, ORANGE, (
                    int(col * SQUARE_SIZE + SQUARE_SIZE // 2), int(row * SQUARE_SIZE + SQUARE_SIZE // 2)),
                                   CIRCLE_RADIUS)


def mark_square(position, player):
    board[position] = player
    return position


def available_square(position):
    return board[position] == 0


def is_board_full(check_board=board):
    for position in range(BOARD_ROWS*BOARD_COLS):
        if check_board[position] == 0:
            return False
    return True


def five_in_a_row(structure, player):
    comp = [player] * 5
    for i in range(len(structure) - 4):
        test = list(structure[i:i + 5])
        if test == comp:
            return True
    return False


def check_win(player, last_move, check_board=board):
    ends = bounds4[last_move]
    horizontal = check_board[ends[0]:ends[1]]
    vertical = check_board[ends[2]:ends[3]:15]
    UL_DR = check_board[ends[4]:ends[5]:16]
    UR_DL = check_board[ends[6]:ends[7]:14]
    return five_in_a_row(horizontal, player) or five_in_a_row(vertical, player) or five_in_a_row(UL_DR, player) or five_in_a_row(UR_DL, player)

def board_add(player, move, checkboard=board):
    checkboard[move] = player

def board_del(move, checkboard=board):
    checkboard[move] = 0

# pridat xxx-- a xx---
d1 = {(1, 1, 1, 1, 1): 100000000000000, (0, 1, 1, 1, 1, 0): 100000, (0, 1, 1, 1, 0, 0): 1000, (0, 0, 1, 1, 1, 0): 1000, (0, 1, 1, 0, 1, 0): 400, (0, 1, 0, 1, 1, 0): 400, (0, 1, 1, 1, 1): 1000, (1, 0, 1, 1, 1): 800, (1, 1, 0, 1, 1): 800, (1, 1, 1, 0, 1): 800, (1, 1, 1, 1, 0): 1000, (0, 1, 1, 1, 0): 600, (1, 0, 1, 1, 0): 200, (0, 1, 1, 0, 1): 200, (1, 0, 1, 0, 1): 100, (0, 1, 1, 0, 0): 100, (0, 0, 1, 1, 0): 100, (0, 1, 0, 1, 0): 80}
d2 = {(2, 2, 2, 2, 2): 100000000000000, (0, 2, 2, 2, 2, 0): 100000, (0, 2, 2, 2, 0, 0): 1000, (0, 0, 2, 2, 2, 0): 1000, (0, 2, 2, 0, 2, 0): 400, (0, 2, 0, 2, 2, 0): 400, (0, 2, 2, 2, 2): 800, (2, 0, 2, 2, 2): 800, (2, 2, 0, 2, 2): 800, (2, 2, 2, 0, 2): 800, (2, 2, 2, 2, 0): 1000, (0, 2, 2, 2, 0): 600, (2, 0, 2, 2, 0): 200, (0, 2, 2, 0, 2): 200, (2, 0, 2, 0, 2): 100, (0, 2, 2, 0, 0): 100, (0, 0, 2, 2, 0): 100, (0, 2, 0, 2, 0): 80}



def structure_eval(structure, player):
    score = 0
    len(structure)
    if  len(structure) > 4:
        if player == 1:
            for j in range(2):
                for i in range(len(structure) - 4):
                    test = tuple(structure[i:i + 5 + j])
                    check = d1.get(test,0)
                    if score < check:
                        score = check
        else:
            for j in range(2):
                for i in range(len(structure) - 4):
                    test = tuple(structure[i:i + 5 + j])
                    check = d2.get(test, 0)
                    if score < check:
                        score = check
    return score


def move_eval(move, player, check_board):
    score = 1
    ends = bounds7[move]
    horizontal = check_board[ends[0]:ends[1]]
    vertical = check_board[ends[2]:ends[3]:15]
    UL_DR = check_board[ends[4]:ends[5]:16]
    UR_DL = check_board[ends[6]:ends[7]:14]
    Ls = L_shapes[move]

    directions = [horizontal, vertical, UL_DR, UR_DL]

    for direction in directions:
        score += structure_eval(direction, player)

    for pos in Ls:
        if check_board[pos] == player:
            score += 50

    return score


def evaluation(moves, check_board=board):
    score = 0
    #i=1
    for move in moves:
        if check_board[move] == 1:
            score -= move_eval(move, 1, check_board) #//i
        else:
            score += move_eval(move, 2, check_board) #//i
        #i+=0.1
    return score




def children(moves, check_board=board, branching=BRANCH):
    global history
    children = []
    for i in range(BOARD_ROWS):
        for j in range(BOARD_COLS):
            if check_board[i*BOARD_ROWS + j] == 0:
                children.append(i*BOARD_ROWS + j)
    moves = moves + history[-10:] + [112]
    c = sorted(children, key=lambda x: min([max(abs((x%15)-(move%15)), abs((x//15)-(move//15))) for move in moves]))
    #d = sorted(children, key=lambda x: max(abs(move_eval(x,2, check_board)),abs(move_eval(x,1, check_board))), reverse=True)
    #d = sorted(c[:100], key=lambda x: move_eval(x, 2, check_board),reverse=True)
    #e = sorted(c[:100], key=lambda x: (move_eval(x, 1, check_board)))

    #f = sorted(c[:80], key=lambda x: max(abs((x%15)-(history[-1]%15)), abs((x//15)-(history[-1]//15))))

    return c[:branching]
ppp=1
def minimax(depth, player, moves, a, b, check_board=board, branching=BRANCH):
    global ppp

    for event in pygame.event.get():
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_q:
                sys.exit()
    ppp += 1

    if depth == 0:
        return (evaluation(moves, check_board), moves[1])

    if is_board_full(check_board):
        return (0, moves[1])

    best = check_board.index(0)
    if check_win(player %  2 +1, moves[-1], check_board):
        if player == 1:
            return (1000000000000000, moves[1])
        else:
            return (-1000000000000000, moves[1])
    if player == 2:
        value = float('-inf')
        for child in children(moves,check_board, branching):
            moves.append(child)
            board_add(2, child, check_board)
            next = minimax(depth-1, 1, moves, a, b, check_board, branching)
            if value < next[0]:
                value = next[0]
                best = next[1]
            board_del(child, check_board)
            moves.pop()
            if value > b:
                break
            a = max(a, value)
        return (value, best)
    else:
        value = float('inf')
        for child in children(moves, check_board, branching):
            moves.append(child)
            board_add(1, child, check_board)
            next = minimax(depth - 1, 2, moves, a, b, check_board, branching)
            if value > next[0]:
                value = next[0]
                best = next[1]
            board_del(child, check_board)
            moves.pop()
            if value < a:
                break
            b = min(b, value)
        return (value, best)


def erase(checkboard=board):
    for move in range(BOARD_ROWS*BOARD_COLS):
        if checkboard[move] == 0:
            pygame.draw.circle(screen, ORANGE, (
                int((move % BOARD_COLS) * SQUARE_SIZE + SQUARE_SIZE // 2),
                int((move // BOARD_ROWS) * SQUARE_SIZE + SQUARE_SIZE // 2)), CIRCLE_RADIUS // 5,
                               CIRCLE_WIDTH // 3)


def best_move(player,last_move=None):
    global history
    print(f"------ move:{len(history)+1}, nodes: {ppp}")
    if last_move == None:
        return 112
    player2 = player % 2 + 1
    if len(history)>2:
        score0 = minimax(1, player, [last_move], float('-inf'), float('inf'), board, 100)
        check0 = score0[0]
        print(check0)
        if check0 >= 50000000000000:
            print("test1")
            print(score0)
            return score0[1]

        score1 = minimax(1, player2, [last_move], float('-inf'), float('inf'), board, 100)
        check1 = score1[0]
        print(check1)
        if check1 <= -50000000000000:
            print("test2")
            print(score1)
            return score1[1]

        if check0 >= 90000 and check1 > -300000:
            print("test3")
            print(score0)
            move = score0[1]
            return move

        score2 = minimax(DEPTH, player, [last_move], float('-inf'), float('inf'), board, BRANCH)
        check2 = score2[0]

        if check2 >= 90000 and check1 > -300000:
            print("test4")
            print(score2)
            move = score2[1]
            return move

        score3 = minimax(DEPTH, player2, [last_move], float('-inf'), float('inf'), board, BRANCH)
        move = score3[1]
        check3 = score3[0]
        if check3 <= -90000:
            print("test5")
            print(score2,score3,move)
            return move

        if AGGRESSIVITY * 400 + check2 + check3 >= 0:
            print(f"Aggressivity:{AGGRESSIVITY * 500 + check2 + check3}")
            move = score2[1]
            print("test6")
            print(score2, score3, move)
            return move

        print("test7")
        print(score2, score3, move)
        return move
    else:
        score2 = minimax(DEPTH, player, [last_move], float('-inf'), float('inf'), board, 40)
        return score2[1]


def restart_game():
    global history, player, game_over, restart, first, ppp
    screen.fill(ORANGE)
    draw_lines()
    for row in range(BOARD_ROWS):
        for col in range(BOARD_COLS):
            board[row*BOARD_ROWS + col] = 0
    game_over = False
    restart = True
    first = first % 2 + 1
    history = []
    player = 1
    ppp = 1


def user_input():
    global game_over, winner, player, restart, history, first
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            sys.exit()

        if event.type == pygame.MOUSEBUTTONDOWN and not game_over:
            mouseX = event.pos[0] // SQUARE_SIZE
            mouseY = event.pos[1] // SQUARE_SIZE

            if available_square(mouseY * BOARD_ROWS + mouseX):
                process_move(mouseY * BOARD_ROWS + mouseX, player)

        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_r:
                restart_game()
                pygame.display.update()

            if event.key == pygame.K_q:
                sys.exit()

            if event.key == pygame.K_LEFT:
                if player == 1:
                    if first == 2:
                        if len(history)>2:
                            if winner == 1:
                                board[history.pop()] = 0
                            else:
                                board[history.pop()] = 0
                                board[history.pop()] = 0
                            if game_over:
                                game_over = False
                                winner = 0
                                draw_lines()
                            update_display()
                    else:
                        if len(history)>1:
                            if winner == 1:
                                board[history.pop()] = 0
                            else:
                                board[history.pop()] = 0
                                board[history.pop()] = 0
                            if game_over:
                                game_over = False
                                winner = 0
                                draw_lines()
                            update_display()




def process_move(move, player):
    global game_over, winner
    erase()
    square = mark_square(move, player)
    history.append(square)
    draw_figures()
    pygame.display.update()
    if check_win(player, square):
        game_over = True
        winner = player

    elif is_board_full():
        game_over = True
        winner = 0

    if not game_over:
        computer_move()



def computer_move():
    global player, game_over, winner
    player = player % 2 + 1
    last = history[-1]
    move = best_move(player, last)
    erase()
    mark_square(move, player)
    history.append(move)
    if check_win(player, move):
        game_over = True
        winner = player
    elif is_board_full():
        game_over = True
        winner = 0
    player = player % 2 + 1

def update_display():
    draw_figures()
    if game_over:
        if winner == 1:
            draw_lines(GREEN)
        elif winner == 2:
            draw_lines(RED)
        else:
            draw_lines(GREY)
    pygame.display.update()






history = []
player = 1
first = 1
winner = 0
game_over = False
restart = False

draw_lines()

while True:
    restart = False
    if first == 2:
        square = mark_square(112, 2)
        history.append(square)
        draw_figures()
        pygame.display.update()

    while True:
        user_input()

        if restart:
            break

        update_display()